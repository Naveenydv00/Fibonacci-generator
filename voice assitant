import speech_recognition as sr
import pyttsx3
import webbrowser
import os
import datetime
import subprocess
import sys
from typing import Optional


class VoiceAssistant:
    DEFAULT_MUSIC_PATH = "your_default_music.mp3"
    DEFAULT_WEBSITE = "https://www.google.com"

    def __init__(self, name: str = "Assistant") -> None:
        self.name = name
        self.speech_engine = pyttsx3.init()
        self.recognizer = sr.Recognizer()
        self.listening = True
        self.platform = sys.platform
        self.os_name = os.name

        # Configure speech engine
        self.speech_engine.setProperty('rate', 150)
        self.speech_engine.setProperty('volume', 1.0)

        # Perform noise adjustment once for better performance
        try:
            with sr.Microphone() as source:
                print("Calibrating microphone for ambient noise...")
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
                print("Calibration complete.")
        except Exception as e:
            print(f"Microphone initialization failed: {e}")
            self.speak("Microphone initialization failed. Please check your microphone.")

    def speak(self, text: str) -> None:
        """Convert text to speech."""
        self.speech_engine.say(text)
        self.speech_engine.runAndWait()

    def listen(self) -> str:
        """Listen to microphone input and return recognized text or empty string."""
        try:
            with sr.Microphone() as source:
                print("Listening...")
                audio = self.recognizer.listen(source)
        except Exception as e:
            print(f"Error accessing microphone: {e}")
            self.speak("Sorry, I can't access the microphone right now.")
            return ""

        try:
            query = self.recognizer.recognize_google(audio).lower()
            print(f"User said: {query}")
            return query
        except sr.UnknownValueError:
            self.speak("Sorry, I did not understand that.")
        except sr.RequestError:
            self.speak("Sorry, I can't reach the speech service right now.")
        return ""

    def open_website(self, url: Optional[str] = None) -> None:
        """Open a website in the default web browser."""
        url = url or self.DEFAULT_WEBSITE
        self.speak(f"Opening website {url}")
        webbrowser.open(url, new=2)  # Open in new tab if possible

    def tell_time(self) -> None:
        """Speak the current local time."""
        now = datetime.datetime.now().strftime("%I:%M %p")
        self.speak(f"The time is {now}")

    def play_music(self, music_path: Optional[str] = None) -> None:
        """Play music from the specified path or default location."""
        music_path = music_path or self.DEFAULT_MUSIC_PATH
        if not os.path.exists(music_path):
            self.speak("Sorry, I could not find the music file.")
            return

        self.speak("Playing music.")
        if self.os_name == 'nt':  # Windows
            os.startfile(music_path)
        else:
            opener = "open" if self.platform == "darwin" else "xdg-open"
            subprocess.Popen([opener, music_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def stop_listening(self) -> None:
        """Stop the assistant from listening."""
        self.speak("Goodbye!")
        self.listening = False

    def extract_url(self, command: str) -> Optional[str]:
        """Extract URL from the command if present."""
        return next((word for word in command.split() if word.startswith(("http://", "https://"))), None)

    def safe_execute(self, func, *args, **kwargs) -> None:
        """Execute a function safely, catching and reporting errors."""
        try:
            func(*args, **kwargs)
        except Exception as e:
            print(f"Error during execution: {e}")
            self.speak("Oops, something went wrong.")

    def process_command(self, command: str) -> None:
        """Parse and execute the user's command."""
        command_words = set(command.split())
        if "open" in command_words and "website" in command_words:
            url = self.extract_url(command) or self.DEFAULT_WEBSITE
            self.safe_execute(self.open_website, url)
        elif "time" in command_words:
            self.safe_execute(self.tell_time)
        elif "play" in command_words and "music" in command_words:
            self.safe_execute(self.play_music)
        elif command_words.intersection({"stop", "exit", "quit"}):
            self.safe_execute(self.stop_listening)
        else:
            self.speak("Sorry, I don't know how to help with that yet.")

    def run(self) -> None:
        """Start the assistant and continuously listen for commands."""
        self.speak(f"Hello, I am your {self.name}. How can I assist you today?")
        while self.listening:
            command = self.listen()
            if command:
                self.process_command(command)


if __name__ == "__main__":
    assistant = VoiceAssistant(name="Nova")
    assistant.run()
